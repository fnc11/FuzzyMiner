import math
import random
import string

from graphviz import Digraph


def get_pen_width(significance, correlation):
    """
    To calculate the pen width for graph edges.

    :param significance: significance of the edge
    :param correlation: correlation of the edge
    :return: an integer between 0 to 5, rounding to ceiling side.
    """

    return math.ceil(((significance + correlation) * 5) / 2)


def get_label_format(val):
    """
    To show only last three decimal places of the value.

    :param val: Value to be formatted
    :return: shorter label
    """

    return "{:.3f}".format(val)


class VizUtil:
    """
    This class is used for VizUtil objects, VizUtil Objects helps in generating graph from the data using graphviz api.

    Class Attributes:
        GRAPH_PATH: Path where the generated graphs will be stored.
        GRAPH_FORMAT: Format of the images generated by the objects of this class.
        NODE_COLORS: Node colors list (lighter to darker) which is used by all the objects for node coloring.
        CLUSTER_COLORS: Cluster colors list (lighter to darker) which is used by all the objects for cluster coloring.

    Instance attributes:
        fm_nodes: saves the FMNodes list
        fm_edges: saves the FMEdges list
        fm_clusters: saves the FMClusters list

    """

    GRAPH_PATH = 'media/graphs/'
    GRAPH_FORMAT = 'png'
    NODE_COLORS = ['#c4ecf2', '#a9e8f2', '#6bd9ec', '#54d6ea', '#0cb6d1', '#0cb6d1']
    CLUSTER_COLORS = ['#92efd0', '#79e5c1', '#4bedb7', '#27e8a7', '#0adb95', '#0adb95']

    def __init__(self):
        """
        Instantiates the objects.
        """

        self.fm_nodes = None
        self.fm_edges = None
        self.fm_clusters = None

    def visualize(self, fm_nodes, fm_edges, fm_clusters, drop_disconnected_nodes=True):
        """
        This method is used to generate graph from the supplied data.

        :param fm_nodes: FMNodes list
        :param fm_edges: FMEdges list
        :param fm_clusters: FMClusters list
        :param drop_disconnected_nodes: preference to drop disconnected nodes
        :return: path where the generated graph is saved.
        """

        self.fm_nodes = fm_nodes
        self.fm_edges = fm_edges
        self.fm_clusters = fm_clusters

        connected_node_indices = set()
        if drop_disconnected_nodes:
            for edge in self.fm_edges:
                connected_node_indices.add(edge.source)
                connected_node_indices.add(edge.target)

        filename = ''.join(random.choice(string.ascii_lowercase) for i in range(16)) + '.gv'
        dot = Digraph(name='Fuzzy Model',
                      filename=filename,
                      directory=self.GRAPH_PATH, format=self.GRAPH_FORMAT)
        dot.node_attr['shape'] = 'rectangle'
        dot.node_attr['style'] = 'filled'
        dot.node_attr['fontcolor'] = 'black'
        dot.node_attr['fontsize'] = '12.0'
        dot.node_attr['pencolor'] = 'black'

        for node in self.fm_nodes:
            if drop_disconnected_nodes and node.index not in connected_node_indices:
                continue
            tokens = node.label.split('@')
            if len(tokens) == 0:
                continue
            if len(tokens) > 1:
                label = tokens[0] + "\n" + tokens[1]
            else:
                label = tokens[0]
            label += "\n" + get_label_format(node.significance)
            dot.node(str(node.index), label=label, penwidth='1.0',
                     fillcolor=self.NODE_COLORS[int(node.significance * 5)])

        for cluster in self.fm_clusters:
            label = ''.join(
                [cluster.label, ' ', str(cluster.index), ' ~ ', str(len(cluster.primitives)), ' primitives'])
            label = ''.join([label, '\n mean_sig: ', get_label_format(cluster.significance)])
            dot.node(str(cluster.index), label=label, shape='oval',
                     color=self.CLUSTER_COLORS[int(cluster.significance * 5)])

        dot.edge_attr['fontsize'] = '10.0'
        for edge in self.fm_edges:
            label = " sig: " + get_label_format(edge.significance) + "\n" + " cor: " + get_label_format(edge.correlation)
            pen_width = get_pen_width(edge.significance, edge.correlation)
            dot.edge(str(edge.source), str(edge.target), label=label, constraint='true', penwidth=str(pen_width),
                     color='#FF5F49')
        # print(dot.source)
        # dot.render(view=True)
        dot.render()
        graph_path = ''.join(['/', self.GRAPH_PATH, filename, '.', self.GRAPH_FORMAT])
        # print(graph_path)
        return graph_path
